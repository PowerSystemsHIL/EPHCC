<ui_settings>
    <version>2.1</version>
    <mode>2</mode>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# This code is always executed prior simulation start.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

import sys 
sys.path.append("C:\Python27\Lib\site-packages\pysunspec-1.1.0.dev2-py2.7.egg")
sys.path.append("C:\Python27\Lib\site-packages\pymodbus")

import sunspec
####### add to global 
import sunspec.core.client as client
from pymodbus.client.sync import ModbusTcpClient

import time

ess_server = client.SunSpecClientDevice(client.TCP, 1, ipaddr='192.168.10.40', max_count=10)
pv_server = client.SunSpecClientDevice(client.TCP, 1, ipaddr='192.168.10.41', max_count=10)
#Set to control source 0=CAN 1=Modbus
ess_server.epc.CtlSrc = 1
ess_server.epc.write()
#Set to control source 0=CAN 1=Modbus
pv_server.epc.CtlSrc = 1
pv_server.epc.write()
soft_relay_clients = []
for r in range(42):
    soft_relay_clients.append(ModbusTcpClient('192.168.10.%s' % str(101 + r)))

dms_disconect = 'DMS_ENGINE.Disconnect'
dms_reconect = 'DMS_ENGINE.Reconnect'
dms_exp_req = 'DMS_ENGINE.Export Request'
dms_exp_val = 'DMS_ENGINE.Export Value'
dms_import_req = 'DMS_ENGINE.Import Request'
dms_import_val = 'DMS_ENGINE.Import Value'
dms_pf_req = 'DMS_ENGINE.PF Request'
dms_pf_val = 'DMS_ENGINE.PF Value'
dms_var_req = 'DMS_ENGINE.VAR Request'
dms_var_val = 'DMS_ENGINE.VAR Value'
dms_dr_req = 'DMS_ENGINE.DR Request'
dms_dr_val = 'DMS_ENGINE.DR Value'
dms_blc_start_en = 'DMS_ENGINE.Black Start Enable'
dms_mcgrid_ctrl_start = 'DMS_ENGINE.MicorGrid Controler Start'
dms_req_to_sync = 'DMS_ENGINE.Request To Sync To POI'
dms_bs_en = 'DMS_ENGINE.BS Enabled'


time_in_sec = 0
dms_enable = False
loop_time = 30*60
dms_cmds = [     #dms reg      ,val, time in s
                [ dms_exp_req, 1000, 5.5*60],
                [ dms_exp_req, 0, 7*60],

                [ dms_exp_req, 4000, 7.5*60],
                [ dms_exp_req, 0, 9*60],

                [ dms_import_val, 8000, 17.5*60],
                [ dms_import_val, 0, 18.5*60],

                [ dms_pf_req, 0.5, 6.5*60],
                [ dms_pf_req, 1, 9*60],

                [ dms_disconect, 1, 9*60],
                [ dms_disconect, 0, 17*60],

                [ dms_req_to_sync, 1, 5*60],
                [ dms_req_to_sync, 0, 9*60],

                [ dms_req_to_sync, 1, 17*60],
                [ dms_req_to_sync, 0, 20*60],

                [ dms_mcgrid_ctrl_start, 1, 3*60],

                [ dms_bs_en, 1, 3*60],
            ]
            
# PV profile
ir_profile_running = False
irradiance_array = [944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 944.0, 945.74, 945.04, 946.32, 945.66, 946.97, 946.34, 947.69, 947.08, 948.46, 947.89, 949.3, 948.76, 950.2, 949.69, 951.16, 950.68, 952.17, 951.71, 953.24, 952.81, 954.36, 953.91, 955.45, 955.02, 956.6, 956.19, 957.79, 957.4, 959.02, 958.66, 960.3, 959.96, 961.62, 961.3, 962.99, 962.69, 964.39, 964.11, 965.84, 965.58, 967.33, 967.08, 968.85, 968.62, 970.41, 970.2, 972.01, 971.81, 973.64, 973.46, 975.31, 975.14, 977.0, 976.85, 978.73, 978.6, 980.49, 980.36, 982.28, 982.17, 984.09, 983.97, 985.89, 985.77, 987.7, 987.6, 989.54, 989.45, 991.4, 991.32, 993.29, 993.2, 995.18, 995.11, 997.1, 997.03, 999.03, 998.96, 1001.0, 1000.9, 1002.9, 1002.8, 1004.9, 1004.8, 1006.8, 1006.7, 1008.8, 1008.7, 1010.7, 1010.6, 1012.6, 1012.5, 1014.5, 1014.4, 1016.4, 1016.3, 1018.3, 1018.1, 1020.1, 1019.9, 1021.8, 1021.6, 1023.5, 1023.2, 1025.1, 1024.8, 1026.6, 1026.3, 1028.0, 1027.7, 1029.4, 1029.0, 1030.7, 1030.2, 1031.8, 1031.3, 1032.9, 1032.3, 1033.9, 1033.2, 1034.7, 1034.0, 1035.3, 1034.6, 1035.9, 1035.0, 1036.2, 1035.3, 1036.4, 1035.4, 1036.4, 1035.3, 1036.2, 1035.0, 1035.8, 1034.5, 1035.2, 1033.7, 1034.3, 1032.7, 1033.1, 1031.4, 1031.6, 1029.7, 1029.9, 1027.9, 1027.8, 1025.6, 1025.5, 1023.1, 1022.8, 1020.3, 1019.8, 1017.1, 1016.4, 1013.6, 1012.7, 1009.7, 1008.7, 1005.5, 1004.2, 1000.9, 999.41, 995.84, 994.19, 990.42, 988.56, 984.6, 982.52, 978.35, 976.06, 971.68, 969.16, 964.58, 961.83, 957.04, 954.06, 949.05, 945.84, 940.62, 937.18, 931.7, 927.97, 922.27, 918.32, 912.4, 908.21, 902.08, 897.66, 891.31, 886.66, 880.1, 875.22, 868.46, 863.35, 856.39, 851.05, 843.89, 838.34, 830.99, 825.22, 817.68, 811.7, 803.99, 797.81, 789.92, 783.54, 775.49, 768.92, 760.72, 753.97, 745.62, 738.7, 730.2, 723.12, 714.51, 707.27, 698.53, 691.16, 682.33, 674.82, 665.85, 658.17, 649.11, 641.34, 632.22, 624.35, 615.18, 607.24, 598.03, 590.02, 580.79, 572.74, 563.5, 555.42, 546.19, 538.09, 528.89, 520.8, 511.63, 503.56, 494.45, 486.41, 477.38, 469.39, 460.45, 452.52, 443.69, 435.85, 427.14, 419.4, 410.84, 403.21, 394.8, 387.32, 379.08, 371.74, 363.69, 356.52, 348.68, 341.69, 334.02, 327.19, 319.74, 313.14, 305.95, 299.56, 292.64, 286.5, 279.86, 273.98, 267.62, 262.03, 255.97, 250.67, 244.93, 239.93, 234.52, 229.83, 224.76, 220.39, 215.67, 211.65, 207.28, 203.6, 199.6, 196.28, 192.66, 189.7, 186.45, 183.87, 181.01, 178.8, 176.33, 174.5, 172.42, 170.98, 169.3, 168.25, 166.98, 166.31, 165.4, 165.1, 164.57, 164.68, 164.55, 165.05, 165.32, 166.21, 166.87, 168.16, 169.21, 170.89, 172.32, 174.39, 176.2, 178.65, 180.84, 183.66, 186.21, 189.41, 192.31, 195.87, 199.12, 203.04, 206.63, 210.88, 214.8, 219.39, 223.62, 228.54, 233.08, 238.31, 243.13, 248.66, 253.76, 259.58, 264.93, 271.03, 276.64, 282.99, 288.8, 295.36, 301.37, 308.18, 314.4, 321.41, 327.82, 335.04, 341.62, 349.02, 355.75, 363.33, 370.2, 377.94, 384.93, 392.8, 399.9, 407.9, 415.08, 423.19, 430.45, 438.65, 445.97, 454.24, 461.59, 469.93, 477.31, 485.69, 493.07, 501.48, 508.86, 517.28, 524.63, 533.05, 540.36, 548.76, 556.01, 564.38, 571.58, 579.89, 586.96, 595.17, 602.13, 610.28, 617.14, 625.19, 631.92, 639.89, 646.49, 654.34, 660.8, 668.53, 674.84, 682.44, 688.58, 696.04, 702.01, 709.32, 715.11, 722.26, 727.86, 734.84, 740.25, 747.05, 752.25, 758.87, 763.87, 770.3, 775.07, 781.31, 785.86, 791.89, 796.22, 802.04, 806.14, 811.75, 815.61, 821.0, 824.64, 829.8, 833.15, 838.04, 841.14, 845.82, 848.68, 853.12, 855.73, 859.95, 862.32, 866.31, 868.44, 872.19, 874.08, 877.6, 879.25, 882.54, 883.94, 887.01, 888.18, 891.01, 891.94, 894.55, 895.25, 897.63, 898.1, 900.26, 900.49, 902.43, 902.44, 904.16, 903.95, 905.45, 905.02, 906.31, 905.66, 906.74, 905.88, 906.75, 905.69, 906.34, 905.05, 905.47, 903.96, 904.19, 902.5, 902.53, 900.65, 900.49, 898.43, 898.09, 895.84, 895.32, 892.9, 892.2, 889.61, 888.75, 886.0, 884.97, 882.06, 880.87, 877.81, 876.46, 873.25, 871.75, 868.41, 866.77, 863.29, 861.5, 857.9, 855.98, 852.25, 850.2, 846.36, 844.18, 840.23, 837.94, 833.88, 831.48, 827.33, 824.82, 820.55, 817.91, 813.55, 810.82, 806.39, 803.57, 799.07, 796.18, 791.62, 788.65, 784.03, 781.0, 776.33, 773.24, 768.54, 765.4, 760.67, 757.48, 752.73, 749.51, 744.74, 741.5, 736.72, 733.46, 728.68, 725.42, 720.65, 717.38, 712.63, 709.37, 704.65, 701.4, 696.71, 693.49, 688.85, 685.66, 681.06, 677.92, 673.39, 670.3, 665.82, 662.77, 658.36, 655.38, 651.07, 648.17, 643.95, 641.13, 637.02, 634.3, 630.3, 627.68, 623.81, 621.31, 617.56, 615.18, 611.57, 609.32, 605.86, 603.75, 600.44, 598.48, 595.33, 593.53, 590.55, 588.91, 586.1, 584.63, 582.01, 580.72, 578.28, 577.18, 574.93, 574.02, 571.97, 571.25, 569.41, 568.89, 567.26, 566.94, 565.51, 565.4, 564.18, 564.28, 563.28, 563.6, 562.81, 563.35, 562.79, 563.56, 563.22, 564.2, 564.09, 565.3, 565.41, 566.84, 567.17, 568.84, 569.38, 571.27, 572.04, 574.14, 575.13, 577.45, 578.64, 581.19, 582.59, 585.34, 586.94, 589.9, 591.7, 594.86, 596.84, 600.2, 602.36, 605.91, 608.25, 611.97, 614.48, 618.37, 621.02, 625.06, 627.85, 632.05, 634.97, 639.31, 642.36, 646.84, 650.0, 654.6, 657.87, 662.57, 665.93, 670.73, 674.17, 679.06, 682.56, 687.52, 691.07, 696.08, 699.67, 704.73, 708.34, 713.43, 717.05, 722.16, 725.77, 730.88, 734.47, 739.56, 743.12, 748.18, 751.68, 756.7, 760.14, 765.09, 768.45, 773.33, 776.59, 781.38, 784.51, 789.17, 792.17, 796.72, 799.58, 803.99, 806.69, 810.96, 813.5, 817.61, 819.97, 823.9, 826.08, 829.82, 831.79, 835.34, 837.1, 840.44, 841.97, 845.09, 846.39, 849.27, 850.33, 852.97, 853.78, 856.17, 856.71, 858.84, 859.12, 860.98, 860.99, 862.57, 862.3, 863.6, 863.04, 864.06, 863.21, 863.94, 862.8, 863.23, 861.76, 861.86, 860.1, 859.9, 857.84, 857.35, 854.99, 854.2, 851.55, 850.45, 847.51, 846.12, 842.89, 841.21, 837.7, 835.72, 831.93, 829.67, 825.61, 823.06, 818.73, 815.91, 811.33, 808.24, 803.4, 800.05, 794.98, 791.37, 786.06, 782.22, 776.68, 772.6, 766.86, 762.55, 756.61, 752.08, 745.95, 741.22, 734.91, 729.99, 723.5, 718.38, 711.72, 706.44, 699.65, 694.21, 687.3, 681.72, 674.7, 668.99, 661.87, 656.05, 648.84, 642.92, 635.65, 629.64, 622.32, 616.24, 608.87, 602.74, 595.35, 589.17, 581.76, 575.55, 568.15, 561.93, 554.54, 548.31, 540.95, 534.73, 527.42, 521.22, 513.96, 507.8, 500.6, 494.49, 487.37, 481.32, 474.29, 468.3, 461.36, 455.44, 448.6, 442.78, 436.07, 430.34, 423.76, 418.14, 411.7, 406.21, 399.91, 394.55, 388.41, 383.18, 377.2, 372.11, 366.31, 361.37, 355.74, 350.96, 345.5, 340.88, 335.61, 331.16, 326.07, 321.79, 316.89, 312.78, 308.08, 304.14, 299.63, 295.87, 291.56, 287.97, 283.85, 280.45, 276.52, 273.3, 269.56, 266.51, 262.95, 260.06, 256.69, 253.98, 250.79, 248.25, 245.25, 242.88, 240.06, 237.86, 235.22, 233.18, 230.71, 228.83, 226.52, 224.8, 222.66, 221.09, 219.1, 217.67, 215.84, 214.55, 212.86, 211.7, 210.15, 209.12, 207.7, 206.8, 205.5, 204.71, 203.53, 202.85, 201.77, 201.19, 200.23, 199.74, 198.86, 198.47, 197.68, 197.36, 196.64, 196.38, 195.72, 195.53, 194.95, 194.81, 194.29, 194.2, 193.73, 193.69, 193.27, 193.27, 192.88, 192.92, 192.56, 192.63, 192.3, 192.38, 192.08, 192.18, 191.88, 191.99, 191.71, 191.82, 191.54, 191.65, 191.37, 191.48, 191.19, 191.28, 190.98, 191.06, 190.75, 190.81, 190.47, 190.51, 190.15, 190.17, 189.78, 189.76, 189.33, 189.26, 188.78, 188.68, 188.18, 188.04, 187.5, 187.32, 186.74, 186.52, 185.9, 185.64, 184.99, 184.69, 183.99, 183.65, 182.91, 182.53, 181.75, 181.32, 180.51, 180.04, 179.18, 178.67, 177.77, 177.21, 176.28, 175.68, 174.71, 174.07, 173.06, 172.38, 171.34, 170.62, 169.54, 168.79, 167.67, 166.89, 165.75, 164.92, 163.72, 162.84, 161.61, 160.7, 159.45, 158.51, 157.24, 156.27, 154.98, 153.99, 152.68, 151.67, 150.34, 149.31, 147.97, 146.92, 145.57, 144.51, 143.15, 142.07, 140.71, 139.62, 138.25, 137.16, 135.79, 134.7, 133.32, 132.22, 130.85, 129.75, 128.39, 127.29, 125.93, 124.83, 123.48, 122.39, 121.05, 119.96, 118.64, 117.56, 116.22, 115.12, 113.79, 112.71, 111.4, 110.34, 109.05, 107.99, 106.73, 105.69, 104.45, 103.43, 102.21, 101.22, 100.02, 99.051, 97.884, 96.938, 95.799, 94.879, 93.771, 92.878, 91.801, 90.936, 89.892, 89.057, 88.048, 87.243, 86.268, 85.496, 84.557, 83.817, 82.914, 82.209, 81.344, 80.673, 79.844, 79.21, 78.426, 77.824, 77.06, 76.477, 75.749, 75.21, 74.526, 74.024, 73.381, 72.921, 72.323, 71.905, 71.35, 70.976, 70.467, 70.136, 69.674, 69.389, 68.973, 68.735, 68.367, 68.176, 67.857, 67.714, 67.445, 67.351, 67.132, 67.088, 66.92, 66.927, 66.81, 66.869, 66.804, 66.916, 66.903, 67.069, 67.11, 67.329, 67.423, 67.697, 67.847, 68.174, 68.37, 68.745, 68.993, 69.427, 69.732, 70.221, 70.581, 71.129, 71.546, 72.152, 72.625, 73.29, 73.819, 74.543, 75.13, 75.913, 76.556, 77.4, 78.099, 79.003, 79.759, 80.722, 81.534, 82.557, 83.425, 84.507, 85.431, 86.572, 87.55, 88.751, 89.783, 91.041, 92.127, 93.443, 94.581, 95.953, 97.141, 98.57, 99.811, 101.29, 102.57, 104.1, 105.43, 107.01, 108.38, 110.01, 111.43, 113.11, 114.57, 116.3, 117.8, 119.57, 121.11, 122.93, 124.51, 126.37, 127.98, 129.88, 131.52, 133.46, 135.13, 137.1, 138.8, 140.81, 142.53, 144.57, 146.32, 148.38, 150.14, 152.23, 154.01, 156.12, 157.91, 160.03, 161.83, 163.98, 165.78, 167.93, 169.74, 171.9, 173.7, 175.85, 177.65, 179.81, 181.59, 183.75, 185.52, 187.67, 189.42, 191.56, 193.3, 195.43, 197.15, 199.26, 200.95, 203.04, 204.7, 206.77, 208.4, 210.44, 212.03, 214.04, 215.59, 217.57, 219.08, 221.01, 222.48, 224.37, 225.79, 227.64, 229.01, 230.81, 232.12, 233.87, 235.13, 236.82, 238.02, 239.66, 240.79, 242.37, 243.43, 244.93, 245.92, 247.37, 248.29, 249.67, 250.51, 251.83, 252.6, 253.84, 254.54, 255.71, 256.34, 257.44, 257.99, 259.01, 259.48, 260.44, 260.83, 261.71, 262.03, 262.83, 263.07, 263.79, 263.95, 264.6, 264.69, 265.26, 265.27, 265.77, 265.7, 266.12, 265.97, 266.32, 266.1, 266.38, 266.08, 266.28, 265.92, 266.05, 265.6, 265.65, 265.14, 265.12, 264.54, 264.46, 263.81, 263.67, 262.96, 262.75, 261.98, 261.72, 260.89, 260.57, 259.69, 259.32, 258.39, 257.96, 256.98, 256.51, 255.48, 254.96, 253.9, 253.34, 252.24, 251.63, 250.5, 249.86, 248.69, 248.02, 246.82, 246.12, 244.9, 244.18, 242.94, 242.19, 240.93, 240.16, 238.89, 238.1, 236.82, 236.01, 234.72, 233.91, 232.61, 231.79, 230.49, 229.67, 228.37, 227.55, 226.26, 225.45, 224.17, 223.36, 222.09, 221.29, 220.04, 219.25, 218.02, 217.25, 216.03, 215.28, 214.09, 213.36, 212.19, 211.49, 210.35, 209.67, 208.56, 207.91, 206.83, 206.21, 205.17, 204.57, 203.57, 203.01, 202.04, 201.52, 200.59, 200.1, 199.2, 198.75, 197.89, 197.47, 196.65, 196.27, 195.5, 195.16, 194.43, 194.14, 193.45, 193.2, 192.55, 192.34, 191.74, 191.58, 191.02, 190.9, 190.39, 190.75, 191.06, 190.98, 191.28, 191.19, 191.48, 191.37, 191.65, 191.54, 191.82, 191.71, 191.99, 191.88, 192.18, 192.08, 192.38, 192.3, 192.63, 192.56, 192.92, 192.88, 193.27, 193.27, 193.69, 193.73, 194.2, 194.29, 194.81, 194.95, 195.53, 195.72, 196.38, 196.64, 197.36, 197.68, 198.47, 198.86, 199.74, 200.23, 201.19, 201.77, 202.85, 203.53, 204.71, 205.5, 206.8, 207.7, 209.12, 210.15, 211.7, 212.86, 214.55, 215.84, 217.67, 219.1, 221.09, 222.66, 224.8, 226.52, 228.83, 230.71, 233.18, 235.22, 237.86, 240.06, 242.88, 245.25, 248.25, 250.79, 253.98, 256.69, 260.06, 262.95, 266.51, 269.56, 273.3, 276.52, 280.45, 283.85, 287.97, 291.56, 295.87, 299.63, 304.14, 308.08, 312.78, 316.89, 321.79, 326.07, 331.16, 335.61, 340.88, 345.5, 350.96, 355.74, 361.37, 366.31, 372.11, 377.2, 383.18, 388.41, 394.55, 399.91, 406.21, 411.7, 418.14, 423.76, 430.34, 436.07, 442.78, 448.6, 455.44, 461.36, 468.3, 474.29, 481.32, 487.37, 494.49, 500.6, 507.8, 513.96, 521.22, 527.42, 534.73, 540.95, 548.31, 554.54, 561.93, 568.15, 575.55, 581.76, 589.17, 595.35, 602.74, 608.87, 616.24, 622.32, 629.64, 635.65, 642.92, 648.84, 656.05, 661.87, 668.99, 674.7, 681.72, 687.3, 694.21, 699.65, 706.44, 711.72, 718.38, 723.5, 729.99, 734.91, 741.22, 745.95, 752.08, 756.61, 762.55, 766.86, 772.6, 776.68, 782.22, 786.06, 791.37, 794.98, 800.05, 803.4, 808.24, 811.33, 815.91, 818.73, 823.06, 825.61, 829.67, 831.93, 835.72, 837.7, 841.21, 842.89, 846.12, 847.51, 850.45, 851.55, 854.2, 854.99, 857.35, 857.84, 859.9, 860.1, 861.86, 861.76, 863.23, 862.8, 863.94, 863.21, 864.06, 863.04, 863.6, 862.3, 862.57, 860.99, 860.98, 859.12, 858.84, 856.71, 856.17, 853.78, 852.97, 850.33, 849.27, 846.39, 845.09, 841.97, 840.44, 837.1, 835.34, 831.79, 829.82, 826.08, 823.9, 819.97, 817.61, 813.5, 810.96, 806.69, 803.99, 799.58, 796.72, 792.17, 789.17, 784.51, 781.38, 776.59, 773.33, 768.45, 765.09, 760.14, 756.7, 751.68, 748.18, 743.12, 739.56, 734.47, 730.88, 725.77, 722.16, 717.05, 713.43, 708.34, 704.73, 699.67, 696.08, 691.07, 687.52, 682.56, 679.06, 674.17, 670.73, 665.93, 662.57, 657.87, 654.6, 650.0, 646.84, 642.36, 639.31, 634.97, 632.05, 627.85, 625.06, 621.02, 618.37, 614.48, 611.97, 608.25, 605.91, 602.36, 600.2, 596.84, 594.86, 591.7, 589.9, 586.94, 585.34, 582.59, 581.19, 578.64, 577.45, 575.13, 574.14, 572.04, 571.27, 569.38, 568.84, 567.17, 566.84, 565.41, 565.3]

#irradiance_array = [100.0, 944.0]

]]></initialization_code>
    <components>
        <component_data>
                <id>e7c5374ff3e911e691413c970e5956c7</id>
                <name><![CDATA[ Feeder 2]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
from math import atan, sqrt, pi
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
P_ref = hil.read_analog_signal(name = 'F3_PCC.P')/1000.0
Q_ref = hil.read_analog_signal(name = 'F3_PCC.Q')/1000.0


if P_ref > 0:
    phase_P = atan(Q_ref/P_ref)
elif P_ref < 0 and Q_ref >= 0:
    phase_P = atan(Q_ref/P_ref)+pi
elif P_ref < 0 and Q_ref < 0:
    phase_P = atan(Q_ref/P_ref)-pi
elif P_ref == 0 and Q_ref >= 0:
    phase_P=pi/2
elif P_ref == 0 and Q_ref >= 0:
    phase_P=-pi/2
else:
    phase_P=0

magnitude_P = sqrt(P_ref**2+Q_ref**2)

displayValue = [['Complex power [kVA]', 180*phase_P/3.14,   magnitude_P ]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <phasors_data>
                    </phasors_data>
                <widget_settings>
                    <x>464</x>
                    <y>312</y>
                    <width>192</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>6000.0</range_max>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>513e87b0f3ed11e69d773c970e5956c7</id>
                <name><![CDATA[Natural Gas genset PQ]]></name>
                <type>MultiTraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
import numpy as np
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]
P = hil.read_analog_signal(name = 'NG GENSET.NG_GCB_Measurements.P_Gen1')*4000.0
Q = hil.read_analog_signal(name = 'NG GENSET.NG_GCB_Measurements.Q_Gen1')*4000.0

displayValue = [ [P,Q], ['P [kW]','Q [kvar]'] ]

]]></code>
                <signals><![CDATA[[u'P [kW]', u'Q [kvar]']]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1248</x>
                    <y>512</y>
                    <width>360</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-2000.0</y_range_min>
                    <y_range_max>4000.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>49c67380f3ed11e6991c3c970e5956c7</id>
                <name><![CDATA[PV inverter PQ]]></name>
                <type>MultiTraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
import numpy as np
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]

P = hil.read_analog_signal(name = 'F2_CB11.MID_Rly1.SEL_787.P')
Q = hil.read_analog_signal(name = 'F2_CB11.MID_Rly1.SEL_787.Q')


displayValue = [ [P,Q], ['P [kW]','Q [kvar]'] ]

]]></code>
                <signals><![CDATA[[u'P [kW]', u'Q [kvar]']]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>896</x>
                    <y>512</y>
                    <width>384</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-2000.0</y_range_min>
                    <y_range_max>4000.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>3c77c61ef3ed11e6a55d3c970e5956c7</id>
                <name><![CDATA[Energy storage PQ]]></name>
                <type>MultiTraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
import numpy as np
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]

P = hil.read_analog_signal(name = 'ESS.P')/1000.0
Q = hil.read_analog_signal(name = 'ESS.Q')/1000.0

displayValue = [ [P,Q], ['P [kW]','Q [kvar]'] ]

]]></code>
                <signals><![CDATA[[u'P [kW]', u'Q [kvar]']]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>552</x>
                    <y>512</y>
                    <width>376</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-2000.0</y_range_min>
                    <y_range_max>4000.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>1356724ff3ed11e68c363c970e5956c7</id>
                <name><![CDATA[Diesel genset PQ]]></name>
                <type>MultiTraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
import numpy as np
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]
P = hil.read_analog_signal(name = 'DIESEL GENSET.DIESEL_GCB_Measurements.P_Gen1')*4e3
Q = hil.read_analog_signal(name = 'DIESEL GENSET.DIESEL_GCB_Measurements.Q_Gen1')*4e3

displayValue = [ [P,Q], ['P [kW]','Q [kvar]'] ]

]]></code>
                <signals><![CDATA[[u'P [kW]', u'Q [kvar]']]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>512</y>
                    <width>384</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-2000.0</y_range_min>
                    <y_range_max>4000.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>8b1668cff3e911e6bcde3c970e5956c7</id>
                <name><![CDATA[ Feeder 1]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
from math import atan, sqrt, pi
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
P_ref = hil.read_analog_signal(name = 'F1_PCC.P')/1000.0
Q_ref = hil.read_analog_signal(name = 'F1_PCC.Q')/1000.0


if P_ref > 0:
    phase_P = atan(Q_ref/P_ref)
elif P_ref < 0 and Q_ref >= 0:
    phase_P = atan(Q_ref/P_ref)+pi
elif P_ref < 0 and Q_ref < 0:
    phase_P = atan(Q_ref/P_ref)-pi
elif P_ref == 0 and Q_ref >= 0:
    phase_P=pi/2
elif P_ref == 0 and Q_ref >= 0:
    phase_P=-pi/2
else:
    phase_P=0

magnitude_P = sqrt(P_ref**2+Q_ref**2)

displayValue = [['Complex power [kVA]', 180*phase_P/3.14,   magnitude_P ]]
]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <phasors_data>
                    </phasors_data>
                <widget_settings>
                    <x>472</x>
                    <y>0</y>
                    <width>176</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>6000.0</range_max>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>7e80bd21f3e711e684453c970e5956c7</id>
                <name><![CDATA[Feeder 3 PQ]]></name>
                <type>MultiTraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]
P = hil.read_analog_signal(name = 'F3_PCC.P')/1000.0
Q = hil.read_analog_signal(name = 'F3_PCC.Q')/1000.0
displayValue = [[P, Q], ["P [kW]", "Q [kvar]"]]


]]></code>
                <signals><![CDATA[[u'P [kW]', u'Q [kvar]']]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>312</y>
                    <width>480</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-3000.0</y_range_min>
                    <y_range_max>5000.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>6b01218ff3e711e6bba63c970e5956c7</id>
                <name><![CDATA[Feeder 2 PQ]]></name>
                <type>MultiTraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]
P = hil.read_analog_signal(name = 'F2_PCC.P')/1000.0
Q = hil.read_analog_signal(name = 'F2_PCC.Q')/1000.0
displayValue = [[P, Q], ["P [kW]", "Q [kvar]"]]


]]></code>
                <signals><![CDATA[[u'P [kW]', u'Q [kvar]']]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>152</y>
                    <width>480</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-3000.0</y_range_min>
                    <y_range_max>5000.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f7cab000ec8511e68ea14c348851fa7b</id>
                <name><![CDATA[DMS]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'166c54eeec8611e694104c348851fa7b', u'9e3efe00ec8611e68a8d4c348851fa7b', u'946f21aeec8711e69b754c348851fa7b', u'b421c170ec8711e69c654c348851fa7b']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>0</x>
                    <y>1152</y>
                    <width>272</width>
                    <height>608</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>166c54eeec8611e694104c348851fa7b</id>
                <name><![CDATA[DMS Time Sequence]]></name>
                <type>Macro</type>
                <description><![CDATA[None]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

global dms_enable
dms_enable = not dms_enable]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

global time_in_sec
time_in_sec = 0

global dms_enable
dms_enable = False]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

#time_cmd(time, cmd_time, var, value)
#dms_disconect = 'DMS_ENGINE.Disconnect'
#dms_reconect = 'DMS_ENGINE.Reconnect'
#dms_exp_req = 'DMS_ENGINE.Export Request'
#dms_exp_val = 'DMS_ENGINE.Export Value'
#dms_import_req = 'DMS_ENGINE.Import Request'
#dms_import_val = 'DMS_ENGINE.Import Value'
#dms_pf_req = 'DMS_ENGINE.PF Request'
#dms_pf_val = 'DMS_ENGINE.PF Value'
#dms_var_req = 'DMS_ENGINE.VAR Request'
#dms_var_val = 'DMS_ENGINE.VAR Value'
#dms_dr_req = 'DMS_ENGINE.DR Request'
#dms_dr_val = 'DMS_ENGINE.DR Value'
global dms_enable
global time_in_sec

if dms_enable:
    for values in dms_cmds:
        if(time_in_sec == values[2]):
            hil.set_cp_input_value('User defined', 'DMS_ENGINE', values[0], values[1])



    time_in_sec += 1
    
    if time_in_sec == loop_time:
        time_in_sec = 0
        






]]></on_timer_code>
                <run_each>1000</run_each>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>8</y>
                    <width>168</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9e3efe00ec8611e68a8d4c348851fa7b</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
global dms_enable
displayValue = dms_enable

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>176</x>
                    <y>8</y>
                    <width>88</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>946f21aeec8711e69b754c348851fa7b</id>
                <name><![CDATA[Note component]]></name>
                <type>TextNote</type>
                <description><![CDATA[None]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">DMS On</p></body></html>]]></text>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>192</x>
                    <y>8</y>
                    <width>48</width>
                    <height>40</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b421c170ec8711e69c654c348851fa7b</id>
                <name><![CDATA[Note component]]></name>
                <type>TextNote</type>
                <description><![CDATA[None]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:10pt;">Press start button to enable DMS sequence.</span></p></body></html>]]></text>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>48</y>
                    <width>264</width>
                    <height>32</height>
                    <background_color><![CDATA[#55aaff]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dfc4f461ed6711e692054c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F1_CB1.Brk.S1_fb]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>400</x>
                    <y>312</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f819979eed6711e69ee14c34882a0abb</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F1_CB6.Brk.S1_fb]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>392</x>
                    <y>472</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>5a0c34f0ee0711e6ab904c34882a0abb</id>
                <name><![CDATA[Woodward - Diesel Genset]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'7242a1cfee0711e6b5034c34882a0abb', u'097ced2eee0811e6bbde4c34882a0abb']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>272</x>
                    <y>1152</y>
                    <width>616</width>
                    <height>608</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7242a1cfee0711e6b5034c34882a0abb</id>
                <name><![CDATA[Woodward Controls]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'8d82f34fee0711e680ef4c34882a0abb', u'ab3cd04fee0711e6acba4c34882a0abb', u'da90c000ee0711e6a3c84c34882a0abb', u'fc6bb040f2e411e6856cdc4a3e45580c']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>8</x>
                    <y>8</y>
                    <width>192</width>
                    <height>216</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>8d82f34fee0711e680ef4c34882a0abb</id>
                <name><![CDATA[Emergency Stop (DI1)]]></name>
                <type>MacroButton</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

hil.set_digital_output(1,name = 'digital input 1',invert = False,swControl = True, value = 0,device = 3)
hil.wait_sec(1)
hil.set_digital_output(1,name = 'digital input 1',invert = False,swControl = True, value = 1,device = 3)
]]></code>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>8</y>
                    <width>168</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ab3cd04fee0711e6acba4c34882a0abb</id>
                <name><![CDATA[Start in Auto (DI2)]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'ON':
    # do something when 'ON' is selected
    hil.set_digital_output(2,name = 'digital input 2',invert = False,swControl = True, value = 1,device = 3)    
    pass

elif inputValue == 'OFF':
    # do something when 'OFF' is selected
    hil.set_digital_output(2,name = 'digital input 2',invert = False,swControl = True, value = 0,device = 3)    
    pass
]]></code>
                <inputValue><![CDATA[ON]]></inputValue>
                <availableValues>[u'ON', u'OFF']</availableValues>
                <unit><![CDATA[]]></unit>
                <execute_on_load>True</execute_on_load>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>40</y>
                    <width>168</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>da90c000ee0711e6a3c84c34882a0abb</id>
                <name><![CDATA[Alarm Ack (DI5)]]></name>
                <type>MacroButton</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

hil.set_digital_output(5,name = 'digital input 5',invert = False,swControl = True, value = 1,device = 3)
hil.wait_sec(1)
hil.set_digital_output(5,name = 'digital input 5',invert = False,swControl = True, value = 0,device = 3)
hil.wait_sec(1)
hil.set_digital_output(5,name = 'digital input 5',invert = False,swControl = True, value = 1,device = 3)
hil.wait_sec(1)
hil.set_digital_output(5,name = 'digital input 5',invert = False,swControl = True, value = 0,device = 3)
]]></code>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>72</y>
                    <width>168</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>097ced2eee0811e6bbde4c34882a0abb</id>
                <name><![CDATA[Woodward Digital Outputs]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'208eb02eee0811e69e3d4c34882a0abb', u'3a40e79eee0811e69a004c34882a0abb', u'49b3fba1ee0811e6b86b4c34882a0abb', u'5c3512f0ee0811e68b584c34882a0abb', u'69dd790fee0811e6b4184c34882a0abb', u'7b739421ee0811e682564c34882a0abb', u'9e0f711eee0811e6ba3d4c34882a0abb', u'abae1340ee0811e69dea4c34882a0abb', u'b9381bf0ee0811e688604c34882a0abb', u'c2a39bb0ee0811e6adbe4c34882a0abb', u'd087d251ee0811e6818e4c34882a0abb', u'ffe4e9c0ee0811e6aaf24c34882a0abb', u'0ff723f0ee0911e6a86d4c34882a0abb', u'245f23b0ee0911e6aa254c34882a0abb']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>200</x>
                    <y>8</y>
                    <width>400</width>
                    <height>216</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>208eb02eee0811e69e3d4c34882a0abb</id>
                <name><![CDATA[Ready for Operation (DO1)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 1]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>0</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>3a40e79eee0811e69a004c34882a0abb</id>
                <name><![CDATA[Centralized alarm, horn (DO2)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 2]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Yellow</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>24</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>49b3fba1ee0811e6b86b4c34882a0abb</id>
                <name><![CDATA[Starter, crank (DO3)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 3]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>48</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>5c3512f0ee0811e68b584c34882a0abb</id>
                <name><![CDATA[Fuel Solenoid, valve (DO4)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 4]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>72</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>69dd790fee0811e6b4184c34882a0abb</id>
                <name><![CDATA[Preglow (DO5)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 5]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>96</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7b739421ee0811e682564c34882a0abb</id>
                <name><![CDATA[GCB status]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[DIESEL GENSET1.GCB_fb]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>152</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9e0f711eee0811e6ba3d4c34882a0abb</id>
                <name><![CDATA[Close GCB (DO6)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 6]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>120</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>abae1340ee0811e69dea4c34882a0abb</id>
                <name><![CDATA[Open GCB (DO7)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 7]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>0</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b9381bf0ee0811e688604c34882a0abb</id>
                <name><![CDATA[Close MCB (DO8)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 8]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>24</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>c2a39bb0ee0811e6adbe4c34882a0abb</id>
                <name><![CDATA[Open MCB (DO9)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 9]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>48</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d087d251ee0811e6818e4c34882a0abb</id>
                <name><![CDATA[Aux services, lube pump (DO10)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 10]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>72</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ffe4e9c0ee0811e6aaf24c34882a0abb</id>
                <name><![CDATA[Warning signal (DO11)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 11]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Yellow</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>96</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>0ff723f0ee0911e6a86d4c34882a0abb</id>
                <name><![CDATA[Fatal Error (DO12)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 12]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>120</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>245f23b0ee0911e6aa254c34882a0abb</id>
                <name><![CDATA[MCB status]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[F1_GCB.Brk.S1_fb]]></signal_name>
                <hil_device>3</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>152</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>45824361ee0911e680144c34882a0abb</id>
                <name><![CDATA[Woodward Controls]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'4582dfa1ee0911e692a94c34882a0abb', u'45837bdeee0911e6a8bf4c34882a0abb', u'4584181eee0911e68c524c34882a0abb', u'4584b461ee0911e6a1e74c34882a0abb']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>8</x>
                    <y>8</y>
                    <width>192</width>
                    <height>216</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4582dfa1ee0911e692a94c34882a0abb</id>
                <name><![CDATA[Emergency Stop (DI1)]]></name>
                <type>MacroButton</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

hil.set_digital_output(1,name = 'digital input 1',invert = False,swControl = True, value = 0,device = 2)
hil.wait_sec(1)
hil.set_digital_output(1,name = 'digital input 1',invert = False,swControl = True, value = 1,device = 2)
]]></code>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>8</y>
                    <width>168</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>45837bdeee0911e6a8bf4c34882a0abb</id>
                <name><![CDATA[Start in Auto (DI2)]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'ON':
    # do something when 'ON' is selected
    hil.set_digital_output(2,name = 'digital input 2',invert = False,swControl = True, value = 1,device = 2)    
    pass

elif inputValue == 'OFF':
    # do something when 'OFF' is selected
    hil.set_digital_output(2,name = 'digital input 2',invert = False,swControl = True, value = 0,device = 2)    
    pass

]]></code>
                <inputValue><![CDATA[ON]]></inputValue>
                <availableValues>[u'ON', u'OFF']</availableValues>
                <unit><![CDATA[]]></unit>
                <execute_on_load>True</execute_on_load>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>40</y>
                    <width>168</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4584181eee0911e68c524c34882a0abb</id>
                <name><![CDATA[Alarm Ack (DI5)]]></name>
                <type>MacroButton</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

hil.set_digital_output(5,name = 'digital input 5',invert = False,swControl = True, value = 1,device = 2)
hil.wait_sec(1)
hil.set_digital_output(5,name = 'digital input 5',invert = False,swControl = True, value = 0,device = 2)
hil.wait_sec(1)
hil.set_digital_output(5,name = 'digital input 5',invert = False,swControl = True, value = 1,device = 2)
hil.wait_sec(1)
hil.set_digital_output(5,name = 'digital input 5',invert = False,swControl = True, value = 0,device = 2)
]]></code>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>72</y>
                    <width>168</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4584b461ee0911e6a1e74c34882a0abb</id>
                <name><![CDATA[Stop Machine]]></name>
                <type>MacroButton</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------
#Vf_stop is in per units on a base of 35V

hil.set_cp_input_value('User defined', 'Stop Gen2', 'NG GENSET.Exciter.Vf_stop', 1.0)
hil.wait_msec(200.0)
hil.set_cp_input_value('User defined', 'Stop Gen2', 'NG GENSET.Exciter.Vf_stop', 2.0)
hil.wait_msec(200.0)
hil.set_cp_input_value('User defined', 'Stop Gen2', 'NG GENSET.Exciter.Vf_stop', 10.0)
hil.wait_msec(200.0)
hil.set_cp_input_value('User defined', 'Stop Gen2', 'NG GENSET.Exciter.Vf_stop', 0.0)
]]></code>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>104</y>
                    <width>168</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4585298fee0911e68bfb4c34882a0abb</id>
                <name><![CDATA[Woodward Digital Outputs]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'4585c5d1ee0911e6834f4c34882a0abb', u'4586620fee0911e69cab4c34882a0abb', u'4586d740ee0911e696474c34882a0abb', u'45874c70ee0911e6a2fb4c34882a0abb', u'4587c1a1ee0911e69b094c34882a0abb', u'458836d1ee0911e6810c4c34882a0abb', u'4588ac00ee0911e6a3934c34882a0abb', u'4589212eee0911e68b584c34882a0abb', u'4589bd70ee0911e6a3e14c34882a0abb', u'458a329eee0911e690b24c34882a0abb', u'458aa7cfee0911e6b4be4c34882a0abb', u'458b1d00ee0911e68b8f4c34882a0abb', u'458b9230ee0911e6a5214c34882a0abb', u'458c2e6eee0911e6bada4c34882a0abb']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>200</x>
                    <y>8</y>
                    <width>400</width>
                    <height>216</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4585c5d1ee0911e6834f4c34882a0abb</id>
                <name><![CDATA[Ready for Operation (DO1)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 1]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>0</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4586620fee0911e69cab4c34882a0abb</id>
                <name><![CDATA[Centralized alarm, horn (DO2)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 2]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Yellow</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>24</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4586d740ee0911e696474c34882a0abb</id>
                <name><![CDATA[Starter, crank (DO3)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 3]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>48</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>45874c70ee0911e6a2fb4c34882a0abb</id>
                <name><![CDATA[Fuel Solenoid, valve (DO4)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 4]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>72</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4587c1a1ee0911e69b094c34882a0abb</id>
                <name><![CDATA[Preglow (DO5)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 5]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>96</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>458836d1ee0911e6810c4c34882a0abb</id>
                <name><![CDATA[GCB status]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[NG GENSET.NG_GCB_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>152</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4588ac00ee0911e6a3934c34882a0abb</id>
                <name><![CDATA[Close GCB (DO6)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 6]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>120</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4589212eee0911e68b584c34882a0abb</id>
                <name><![CDATA[Open GCB (DO7)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 7]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>0</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4589bd70ee0911e6a3e14c34882a0abb</id>
                <name><![CDATA[Close MCB (DO8)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 8]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>24</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>458a329eee0911e690b24c34882a0abb</id>
                <name><![CDATA[Open MCB (DO9)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 9]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>48</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>458aa7cfee0911e6b4be4c34882a0abb</id>
                <name><![CDATA[Aux services, lube pump (DO10)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 10]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>72</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>458b1d00ee0911e68b8f4c34882a0abb</id>
                <name><![CDATA[Warning signal (DO11)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 11]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Yellow</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>96</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>458b9230ee0911e6a5214c34882a0abb</id>
                <name><![CDATA[Fatal Error (DO12)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[digital input 12]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>120</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>458c2e6eee0911e6bada4c34882a0abb</id>
                <name><![CDATA[MCB status]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[NG_MCB.NG_MCB_fb]]></signal_name>
                <hil_device>2</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>200</x>
                    <y>152</y>
                    <width>184</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>45815900ee0911e681fa4c34882a0abb</id>
                <name><![CDATA[Woodward - Natural Gas Genset]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'45824361ee0911e680144c34882a0abb', u'4585298fee0911e68bfb4c34882a0abb']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>2096</x>
                    <y>1152</y>
                    <width>616</width>
                    <height>608</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>33d4bdd1ee0b11e6b3104c34882a0abb</id>
                <name><![CDATA[EPC - Battery Storage]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'3f180acfee0b11e68e5d4c34882a0abb', u'5e96f061ee0b11e684dc4c34882a0abb', u'76f2bf8fee0b11e6849a4c34882a0abb', u'8c2eff40ee0b11e6a42e4c34882a0abb', u'a3394830ee0b11e6b09a4c34882a0abb', u'b60fab6eee0b11e6978f4c34882a0abb', u'b7d8f9c0ee0b11e697834c34882a0abb', u'b9126421ee0b11e68ecc4c34882a0abb', u'550614c0f23111e6af68dc4a3e45580c', u'550614c1f23111e69138dc4a3e45580c', u'550614c2f23111e6a3e3dc4a3e45580c', u'550614c3f23111e6b12edc4a3e45580c', u'550614c4f23111e6a59bdc4a3e45580c', u'9090e51ef27111e6a769dc4a3e45580c']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>888</x>
                    <y>1152</y>
                    <width>600</width>
                    <height>608</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>3f180acfee0b11e68e5d4c34882a0abb</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = 0#hil.read_analog_signal(name = 'Ld1_grid_meas.P_EPC_pu')/1.0e3

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>8</y>
                    <width>136</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>5e96f061ee0b11e684dc4c34882a0abb</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = 0#hil.read_analog_signal(name = 'Ld1_grid_meas.Q_EPC_pu')/1.0e3

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>64</y>
                    <width>136</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>76f2bf8fee0b11e6849a4c34882a0abb</id>
                <name><![CDATA[DC link voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name = 'Ld1_grid_meas.Q_EPC_pu')*1.0e3

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>120</y>
                    <width>136</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>8c2eff40ee0b11e6a42e4c34882a0abb</id>
                <name><![CDATA[L-L RMS voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>176</y>
                    <width>136</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a3394830ee0b11e6b09a4c34882a0abb</id>
                <name><![CDATA[CB3 Status]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>168</x>
                    <y>8</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b60fab6eee0b11e6978f4c34882a0abb</id>
                <name><![CDATA[MX1 (GCB)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>168</x>
                    <y>40</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b7d8f9c0ee0b11e697834c34882a0abb</id>
                <name><![CDATA[MX2 (MCB)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>168</x>
                    <y>72</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b9126421ee0b11e68ecc4c34882a0abb</id>
                <name><![CDATA[K2 (DC Link)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>168</x>
                    <y>104</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>feb408cff15311e6b9fb4c348851fa7b</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = 0#hil.read_analog_signal(name = 'Ld1_grid_meas.P_EPC_pu')/1.0e3

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>8</y>
                    <width>136</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>feb5b680f15311e689324c348851fa7b</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = 0#hil.read_analog_signal(name = 'Ld1_grid_meas.Q_EPC_pu')/1.0e3

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>64</y>
                    <width>136</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>feb6a0e1f15311e6aed24c348851fa7b</id>
                <name><![CDATA[DC link voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name = 'Ld1_grid_meas.Q_EPC_pu')*1.0e3

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>120</y>
                    <width>136</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>feb73d1ef15311e69ab34c348851fa7b</id>
                <name><![CDATA[L-L RMS voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>176</y>
                    <width>136</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>feb80070f15311e6868b4c348851fa7b</id>
                <name><![CDATA[CB3 Status]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>192</x>
                    <y>8</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>feb89cb0f15311e6997b4c348851fa7b</id>
                <name><![CDATA[MX1 (GCB)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>192</x>
                    <y>40</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>feb938f0f15311e6b0234c348851fa7b</id>
                <name><![CDATA[MX2 (MCB)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>192</x>
                    <y>72</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>feb9ae1ef15311e68e6d4c348851fa7b</id>
                <name><![CDATA[K2 (DC Link)]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>192</x>
                    <y>104</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>feb1bedef15311e6ae5b4c348851fa7b</id>
                <name><![CDATA[EPC - PV]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'feb408cff15311e6b9fb4c348851fa7b', u'feb5b680f15311e689324c348851fa7b', u'feb6a0e1f15311e6aed24c348851fa7b', u'feb73d1ef15311e69ab34c348851fa7b', u'feb80070f15311e6868b4c348851fa7b', u'feb89cb0f15311e6997b4c348851fa7b', u'feb938f0f15311e6b0234c348851fa7b', u'feb9ae1ef15311e68e6d4c348851fa7b', u'44c74f80f23511e698ecdc4a3e45580c', u'44c74f81f23511e6bb51dc4a3e45580c', u'44c74f82f23511e6b89fdc4a3e45580c', u'44c74f83f23511e691b9dc4a3e45580c', u'44c74f84f23511e68241dc4a3e45580c', u'9e58e130f27111e69d67dc4a3e45580c']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>1496</x>
                    <y>1152</y>
                    <width>600</width>
                    <height>608</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>550614c0f23111e6af68dc4a3e45580c</id>
                <name><![CDATA[ESS START]]></name>
                <type>Macro</type>
                <description><![CDATA[None]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil


stop = 5900
stop_and_clear = 5902
run = 5901
V_default = 480
f_default = 60

ess_server.inverter.read()

if ess_server.inverter.StVnd == 3:
    #stop
    ess_server.epc.CmdBits = stop
    ess_server.epc.write()
    time.sleep(.5)

    #stop and clear faults
    ess_server.epc.CmdBits = stop_and_clear
    ess_server.epc.write()
    time.sleep(.5)

    #stop
    ess_server.epc.CmdBits = stop
    ess_server.epc.write()
    time.sleep(.5)
    
    #default voltage and frequency
    ess_server.epc.CmdV = V_default
    ess_server.epc.CmdHz = f_default
    ess_server.epc.write()
    time.sleep(.5)
    

#enable and run
ess_server.epc.CmdBits = run
ess_server.epc.write()
time.sleep(.5)

ess_server.epc.read()
print(ess_server.epc)
]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
]]></on_timer_code>
                <run_each>250</run_each>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>296</x>
                    <y>8</y>
                    <width>192</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>550614c1f23111e69138dc4a3e45580c</id>
                <name><![CDATA[Frequency ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
ess_server.epc.CmdHz = inputValue
ess_server.epc.write()
time.sleep(.5)
ess_server.epc.read()
print(ess_server.epc)]]></code>
                <inputValue><![CDATA[60.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[Hz]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>296</x>
                    <y>136</y>
                    <width>224</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>550614c2f23111e6a3e3dc4a3e45580c</id>
                <name><![CDATA[Qref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
ess_server.epc.CmdReactivePwr = inputValue
ess_server.epc.write()
time.sleep(.5)
ess_server.epc.read()
print(ess_server.epc)]]></code>
                <inputValue><![CDATA[800.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[kVar]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>296</x>
                    <y>72</y>
                    <width>224</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>550614c3f23111e6b12edc4a3e45580c</id>
                <name><![CDATA[Pref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

ess_server.epc.CmdRealPwr = inputValue
ess_server.epc.write()
time.sleep(.5)
ess_server.epc.read()
print(ess_server.epc)]]></code>
                <inputValue><![CDATA[1200.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[kW]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>296</x>
                    <y>40</y>
                    <width>216</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>550614c4f23111e6a59bdc4a3e45580c</id>
                <name><![CDATA[Vref_Line-Line]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
ess_server.epc.CmdV = inputValue
ess_server.epc.write()
time.sleep(.5)
ess_server.epc.read()
print(ess_server.epc)]]></code>
                <inputValue><![CDATA[480.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[Vrms]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>296</x>
                    <y>104</y>
                    <width>232</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>44c74f80f23511e698ecdc4a3e45580c</id>
                <name><![CDATA[Pref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
pv_server.epc.CmdRealPwr = inputValue
pv_server.epc.write()
time.sleep(.5)
pv_server.epc.read()
print(pv_server.epc)]]></code>
                <inputValue><![CDATA[330.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <execute_on_load>False</execute_on_load>
                <unit><![CDATA[kW]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>320</x>
                    <y>40</y>
                    <width>216</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>44c74f81f23511e6bb51dc4a3e45580c</id>
                <name><![CDATA[PV START]]></name>
                <type>Macro</type>
                <description><![CDATA[None]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil


stop = 4876 #5900
stop_and_clear = 4878 #5902
run = 4877 #5901
V_default = 480
f_default = 60


#set control source to Modbus
pv_server.epc.CtlSrc = 1
pv_server.epc.write()
time.sleep(.5)

pv_server.inverter.read()

if pv_server.inverter.StVnd == 3:
    

    #stop
    pv_server.epc.CmdBits = stop
    pv_server.epc.write()
    time.sleep(.5)

    #stop and clear faults
    pv_server.epc.CmdBits = stop_and_clear
    pv_server.epc.write()
    time.sleep(.5)

    #stop
    pv_server.epc.CmdBits = stop
    pv_server.epc.write()
    time.sleep(.5)
    
    #default voltage and frequency
    pv_server.epc.CmdV = V_default
    pv_server.epc.CmdHz = f_default
    pv_server.epc.write()
    time.sleep(.5)
    

#enable and run
pv_server.epc.CmdBits = run
pv_server.epc.write()
time.sleep(.5)

pv_server.epc.read()
print(pv_server.epc)
]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
]]></on_timer_code>
                <run_each>250</run_each>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>320</x>
                    <y>8</y>
                    <width>192</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>44c74f82f23511e6b89fdc4a3e45580c</id>
                <name><![CDATA[Vref_Line-Line]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
pv_server.epc.CmdV = inputValue
pv_server.epc.write()
time.sleep(.5)
pv_server.epc.read()
print(pv_server.epc)]]></code>
                <inputValue><![CDATA[480.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <execute_on_load>False</execute_on_load>
                <unit><![CDATA[Vrms]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>320</x>
                    <y>104</y>
                    <width>232</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>44c74f83f23511e691b9dc4a3e45580c</id>
                <name><![CDATA[Qref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
pv_server.epc.CmdReactivePwr = inputValue
pv_server.epc.write()
time.sleep(.5)
pv_server.epc.read()
print(ess_server.epc)]]></code>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <execute_on_load>False</execute_on_load>
                <unit><![CDATA[kVar]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>320</x>
                    <y>72</y>
                    <width>224</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>44c74f84f23511e68241dc4a3e45580c</id>
                <name><![CDATA[Frequency ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
pv_server.epc.CmdHz = inputValue
pv_server.epc.write()
time.sleep(.5)
pv_server.epc.read()
print(pv_server.epc)]]></code>
                <inputValue><![CDATA[60.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <execute_on_load>False</execute_on_load>
                <unit><![CDATA[Hz]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>320</x>
                    <y>136</y>
                    <width>224</width>
                    <height>40</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9090e51ef27111e6a769dc4a3e45580c</id>
                <name><![CDATA[ESS P (kW)]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = 'ESS.P')/1000.0
displayValue = P

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>152</x>
                    <y>168</y>
                    <width>128</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>9e58e130f27111e69d67dc4a3e45580c</id>
                <name><![CDATA[PV P (kW)]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = 'F2_CB11.MID_Rly1.SEL_787.P')/1000.0
displayValue = P

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>160</x>
                    <y>176</y>
                    <width>128</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fc6bb040f2e411e6856cdc4a3e45580c</id>
                <name><![CDATA[Stop Machine]]></name>
                <type>MacroButton</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

#Vf_stop is in per units on a base of 35V

hil.set_cp_input_value('User defined', 'Stop Gen2', 'DIESEL GENSET.Exciter.Vf_stop', 1.0)
hil.wait_msec(200.0)
hil.set_cp_input_value('User defined', 'Stop Gen2', 'DIESEL GENSET.Exciter.Vf_stop', 2.0)
hil.wait_msec(200.0)
hil.set_cp_input_value('User defined', 'Stop Gen2', 'DIESEL GENSET.Exciter.Vf_stop', 2.0)
hil.wait_msec(2000.0)
hil.set_cp_input_value('User defined', 'Stop Gen2', 'DIESEL GENSET.Exciter.Vf_stop', 0.0)
]]></code>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>104</y>
                    <width>168</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7bd534f0f31211e694f1dc4a3e45580c</id>
                <name><![CDATA[Relay control]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[]]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>2712</x>
                    <y>1152</y>
                    <width>216</width>
                    <height>104</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>3888e770f3e711e688f03c970e5956c7</id>
                <name><![CDATA[Main feeders power reading]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'e7c5374ff3e911e691413c970e5956c7', u'8b1668cff3e911e6bcde3c970e5956c7', u'7e80bd21f3e711e684453c970e5956c7', u'6b01218ff3e711e6bba63c970e5956c7', u'579f6e40f3e711e686f03c970e5956c7', u'c63bb4aef3e911e6b3f23c970e5956c7']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>0</x>
                    <y>0</y>
                    <width>664</width>
                    <height>512</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>579f6e40f3e711e686f03c970e5956c7</id>
                <name><![CDATA[Feeder 1 PQ]]></name>
                <type>MultiTraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ [sigVal1,sigVal2,sigVal3], ["Signal 1 name","Signal 2 name","Signal 3 name"] ]
P = hil.read_analog_signal(name = 'F1_PCC.P')/1000.0
Q = hil.read_analog_signal(name = 'F1_PCC.Q')/1000.0
displayValue = [[P, Q], ["P [kW]", "Q [kvar]"]]


]]></code>
                <signals><![CDATA[[u'P [kW]', u'Q [kvar]']]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>0</y>
                    <width>480</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-3000.0</y_range_min>
                    <y_range_max>5000.0</y_range_max>
                    <time_window>60</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>c63bb4aef3e911e6b3f23c970e5956c7</id>
                <name><![CDATA[ Feeder 2]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
from math import atan, sqrt, pi
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
P_ref = hil.read_analog_signal(name = 'F2_PCC.P')/1000.0
Q_ref = hil.read_analog_signal(name = 'F2_PCC.Q')/1000.0


if P_ref > 0:
    phase_P = atan(Q_ref/P_ref)
elif P_ref < 0 and Q_ref >= 0:
    phase_P = atan(Q_ref/P_ref)+pi
elif P_ref < 0 and Q_ref < 0:
    phase_P = atan(Q_ref/P_ref)-pi
elif P_ref == 0 and Q_ref >= 0:
    phase_P=pi/2
elif P_ref == 0 and Q_ref >= 0:
    phase_P=-pi/2
else:
    phase_P=0

magnitude_P = sqrt(P_ref**2+Q_ref**2)

displayValue = [['Complex power [kVA]', 180*phase_P/3.14,   magnitude_P ]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <phasors_data>
                    </phasors_data>
                <widget_settings>
                    <x>472</x>
                    <y>152</y>
                    <width>176</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>6000.0</range_max>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ec2540a1f3ea11e68b713c970e5956c7</id>
                <name><![CDATA[DMS  PF Request ]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_cp_input_value('User defined', 'DMS_ENGINE', 'DMS_ENGINE.PF Request', inputValue)]]></code>
                <inputValue><![CDATA[0]]></inputValue>
                <inputValueType>int</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>128</y>
                    <width>216</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ec289c00f3ea11e6b5653c970e5956c7</id>
                <name><![CDATA[DMS  Import Request ]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_cp_input_value('User defined', 'DMS_ENGINE', 'DMS_ENGINE.Import Request', inputValue)]]></code>
                <inputValue><![CDATA[1]]></inputValue>
                <inputValueType>int</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>64</y>
                    <width>216</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ec2ae5f0f3ea11e6a5733c970e5956c7</id>
                <name><![CDATA[DMS  Import Value ]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_cp_input_value('User defined', 'DMS_ENGINE', 'DMS_ENGINE.Import Value', inputValue)]]></code>
                <inputValue><![CDATA[1000]]></inputValue>
                <inputValueType>int</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>96</y>
                    <width>216</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ec2bf75ef3ea11e6a5573c970e5956c7</id>
                <name><![CDATA[DMS Export Value ]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_cp_input_value('User defined', 'DMS_ENGINE', 'DMS_ENGINE.Export Value', inputValue)]]></code>
                <inputValue><![CDATA[0]]></inputValue>
                <inputValueType>int</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>32</y>
                    <width>216</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ec2ce1c0f3ea11e6b41f3c970e5956c7</id>
                <name><![CDATA[DMS Export Request ]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_cp_input_value('User defined', 'DMS_ENGINE', 'DMS_ENGINE.Export Request', inputValue)]]></code>
                <inputValue><![CDATA[0]]></inputValue>
                <inputValueType>int</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>0</y>
                    <width>216</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ec1fe970f3ea11e6ad823c970e5956c7</id>
                <name><![CDATA[DMS Override]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'ec2540a1f3ea11e68b713c970e5956c7', u'ec289c00f3ea11e6b5653c970e5956c7', u'ec2ae5f0f3ea11e6a5733c970e5956c7', u'ec2bf75ef3ea11e6a5573c970e5956c7', u'ec2ce1c0f3ea11e6b41f3c970e5956c7', u'47c55e40f3eb11e695e93c970e5956c7', u'47ce37e1f3eb11e6be633c970e5956c7', u'47d64e30f3eb11e6907a3c970e5956c7']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>0</x>
                    <y>512</y>
                    <width>216</width>
                    <height>288</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>47c55e40f3eb11e695e93c970e5956c7</id>
                <name><![CDATA[DMS  PF Value ]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_cp_input_value('User defined', 'DMS_ENGINE', 'DMS_ENGINE.PF Value', inputValue)]]></code>
                <inputValue><![CDATA[1000]]></inputValue>
                <inputValueType>int</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>160</y>
                    <width>216</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>47ce37e1f3eb11e6be633c970e5956c7</id>
                <name><![CDATA[DMS VAR Value ]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_cp_input_value('User defined', 'DMS_ENGINE', 'DMS_ENGINE.VAR Value', inputValue)]]></code>
                <inputValue><![CDATA[0]]></inputValue>
                <inputValueType>int</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>224</y>
                    <width>216</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>47d64e30f3eb11e6907a3c970e5956c7</id>
                <name><![CDATA[DMS VAR Request ]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_cp_input_value('User defined', 'DMS_ENGINE', 'DMS_ENGINE.VAR Request', inputValue)]]></code>
                <inputValue><![CDATA[0]]></inputValue>
                <inputValueType>int</inputValueType>
                <execute_on_load>True</execute_on_load>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>192</y>
                    <width>216</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>73285d51f3ee11e68a5a3c970e5956c7</id>
                <name><![CDATA[Load control]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'7be7706ef3ee11e6905f3c970e5956c7', u'7bf18291f3ee11e6a8093c970e5956c7']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>1600</x>
                    <y>528</y>
                    <width>176</width>
                    <height>96</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7be7706ef3ee11e6905f3c970e5956c7</id>
                <name><![CDATA[Motor 1 control]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    hil.set_contactor('F1_Motor.CB.S1',swControl= True,swState= True)
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    hil.set_contactor('F1_Motor.CB.S1',swControl= True,swState= False)

]]></code>
                <inputValue><![CDATA[Off]]></inputValue>
                <availableValues>[u'On', u'Off']</availableValues>
                <unit><![CDATA[]]></unit>
                <execute_on_load>True</execute_on_load>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>0</y>
                    <width>160</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7bf18291f3ee11e6a8093c970e5956c7</id>
                <name><![CDATA[Motor 3 control]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    hil.set_contactor('F3_Motor.CB.S1',swControl= True,swState= True)
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    hil.set_contactor('F3_Motor.CB.S1',swControl= True,swState= False)

]]></code>
                <inputValue><![CDATA[Off]]></inputValue>
                <availableValues>[u'On', u'Off']</availableValues>
                <unit><![CDATA[]]></unit>
                <execute_on_load>True</execute_on_load>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>32</y>
                    <width>160</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a10abba1f3ee11e690d23c970e5956c7</id>
                <name><![CDATA[Reset sequence]]></name>
                <type>Macro</type>
                <description><![CDATA[None]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

index = 0]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

index = 0]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

if ir_profile_running:
    I_ref = irradiance_array[index] * 0.33

    pv_server.epc.CmdRealPwr = I_ref
    pv_server.epc.write()

    index+=1
    if (index > (len(irradiance_array)-1)):
        index = 0]]></on_timer_code>
                <run_each>1000</run_each>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>32</y>
                    <width>152</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a10bf41ef3ee11e696cb3c970e5956c7</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = ir_profile_running
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>104</x>
                    <y>0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a10d058ff3ee11e6aec73c970e5956c7</id>
                <name><![CDATA[Profile]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

# Function for printing text to console (e.g printf("Hello world"))
from typhoon.utilities.misc import printf
#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

global ir_profile_running

if inputValue == 'Running':
    # do something when 'Case 1' is selected
    ir_profile_running = True
elif inputValue == 'Stopped':
    # do something when 'Case 2' is selected
    ir_profile_running = False

]]></code>
                <inputValue><![CDATA[Running]]></inputValue>
                <availableValues>[u'Running', u'Stopped']</availableValues>
                <unit><![CDATA[]]></unit>
                <execute_on_load>True</execute_on_load>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a108e6def3ee11e6b4fc3c970e5956c7</id>
                <name><![CDATA[Irradiance profile]]></name>
                <type>Group</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[[u'a10abba1f3ee11e690d23c970e5956c7', u'a10bf41ef3ee11e696cb3c970e5956c7', u'a10d058ff3ee11e6aec73c970e5956c7']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <widget_settings>
                    <x>1600</x>
                    <y>624</y>
                    <width>176</width>
                    <height>104</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>1efcb4eef3ef11e6ad7b3c970e5956c7</id>
                <name><![CDATA[Relay trip reset]]></name>
                <type>Macro</type>
                <description><![CDATA[None]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil

for r in range(42):
    soft_relay_clients[r].write_registers(2001, [1])
    time.sleep(0.1)
    soft_relay_clients[r].write_registers(2001, [0])]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers
# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.

# HIL Control Panel API
from typhoon.api import hil_control_panel as hil
]]></on_timer_code>
                <run_each>250</run_each>
                <execute_on_load>False</execute_on_load>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1600</x>
                    <y>728</y>
                    <width>168</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        </components>
</ui_settings>